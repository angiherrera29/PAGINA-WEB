name: Deploy My App to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_PEM_KEY }}

      - name: Build and Push Docker Image
        run: |
          # Variables de entorno
          IMAGE_NAME="marianaolivas/crm:1.0"

          # Iniciar sesión en Docker Hub
          echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

          # Construir la imagen de Docker sin usar caché
          docker build --no-cache -t $IMAGE_NAME .

          # Subir la imagen a Docker Hub (sobrescribir si existe)
          docker push $IMAGE_NAME

      - name: Deploy My App on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # Actualiza los paquetes y asegúrate de que Docker esté instalado
            sudo apt update -y
            sudo apt install -y docker.io

            # Inicia Docker si no está en ejecución
            sudo systemctl start docker
            sudo systemctl enable docker

            # Parar y eliminar el contenedor si ya existe
            if [ "$(sudo docker ps -q -f name=myapp-container)" ]; then
              sudo docker stop myapp-container
              sudo docker rm myapp-container
            fi

            # Eliminar la imagen anterior
            if [ "$(sudo docker images -q marianaolivas/crm:1.0)" ]; then
              sudo docker rmi marianaolivas/crm:1.0
            fi

            # Ejecuta el contenedor de la aplicación
            sudo docker run -d \
              -p 80:3000 \
              --name myapp-container \
              marianaolivas/crm:1.0
          EOF
